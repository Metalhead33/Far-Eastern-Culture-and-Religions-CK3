# interaction to buy a slave directly off the targeted slave owner
# actor is you
# recipient is the slave owner
# secondary_recipient is the slave
carn_buy_slave_directly_interaction = {
	category = interaction_category_prison
	desc = carn_buy_slave_directly_interaction_desc
	interface_priority = 31
	common_interaction = yes
	needs_recipient_to_open = yes

	greeting = positive
	
	ai_min_reply_days = 0
	ai_max_reply_days = 0

	redirect = {
		scope:recipient = { # if we clicked on the slave, get their owner on the phone instead
			if = {
				limit = { has_trait = slave }
				save_scope_as = secondary_recipient
				random_relation = {
					type = slave_owner
					save_scope_as = recipient
				}
			}
		}
	}

	populate_recipient_list = {
		scope:recipient = {
			every_relation = {
				type = slave
				limit = {
					is_diplomatically_available = yes
					carn_slave_can_be_sold_trigger = yes
				}
				add_to_list = characters
			}
		}
	}

	is_shown = {
		scope:recipient = {
			NOT = { this = scope:actor }
			any_relation = {
				type = slave
				exists = this
			}
		}
		NAND = { # to prevent ai spamming you with buy slave requests
			scope:actor = { is_ai = yes }
			scope:recipient = { is_ai = no }
		}
	}

	is_valid_showing_failures_only = {
		scope:actor = {
			NOT = { is_at_war_with = scope:recipient }
		}
		trigger_if = {
			limit = { exists = scope:secondary_recipient }
			scope:secondary_recipient = {
				is_diplomatically_available = yes
				carn_slave_can_be_sold_trigger = yes
				carn_slave_price_value <= scope:actor.gold
			}
		}
	}
	
	on_accept = {
		if = {
			limit = { scope:recipient = { has_relation_slave = scope:secondary_recipient } }
			scope:actor = { save_scope_as = buyer }
			scope:recipient = { save_scope_as = seller }
			scope:secondary_recipient = { save_scope_as = slave }
			carn_buy_slave_effect = { 
				SLAVE_PRICE = scope:secondary_recipient.carn_slave_price_value
			}
		}
	}
	
	ai_frequency = 120
	
	ai_targets = {
		ai_recipients = realm_characters
		chance = 0.25
	}
	ai_targets = {
		ai_recipients = neighboring_rulers
		chance = 0.25
	}

	ai_potential = {
		gold >= 50
		any_courtier_or_guest = {
			is_alive = yes
			count <= 30
		}
	}

	ai_will_do = {
		base = 0
		ai_value_modifier = {
			ai_compassion = -1
		}

		#Lacking councillors
		compare_modifier = {
			trigger = { scope:actor = { NOT = { exists = cp:councillor_chancellor } } }
			target = scope:recipient
			value = diplomacy
			offset = {
				value = 0
				subtract = decent_skill_rating
			}
		}
		compare_modifier = {
			trigger = { scope:actor = { NOT = { exists = cp:councillor_marshal } } }
			target = scope:recipient
			value = martial
			offset = {
				value = 0
				subtract = decent_skill_rating
			}
		}
		compare_modifier = {
			trigger = { scope:actor = { NOT = { exists = cp:councillor_steward } } }
			target = scope:recipient
			value = stewardship
			offset = {
				value = 0
				subtract = decent_skill_rating
			}
		}
		compare_modifier = {
			trigger = { scope:actor = { NOT = { exists = cp:councillor_spymaster } } }
			target = scope:recipient
			value = intrigue
			offset = {
				value = 0
				subtract = decent_skill_rating
			}
		}

		#Lacking court physician
		compare_modifier = {
			trigger = { scope:actor = { court_physician_available_trigger = no } }
			target = scope:recipient
			value = learning
			offset = {
				value = 0
				subtract = decent_skill_rating
			}
		}

		#Lacking knights
		compare_modifier = {
			trigger = {
				prowess >= decent_skill_rating
				can_be_knight_trigger = { ARMY_OWNER = scope:actor }
				scope:actor = {
					OR = {
						number_of_knights < max_number_of_knights
						any_knight = {
							prowess < decent_skill_rating
						}
					}
				}
			}
			target = scope:recipient
			value = prowess
			offset = {
				value = 0
				subtract = decent_skill_rating
			}
		}
	}

	ai_accept = {
		base = 0
		modifier = {
			add = 50
			desc = "GOLD_POSITIVE_REASON"
		}
		modifier = {
			trigger = {
				scope:secondary_recipient = {
					is_knight_of = scope:recipient
				}
			}
			add = -25
			desc = "carn_secondary_recipient_is_my_knight_reason"
		}
		modifier = {
			trigger = {
				scope:secondary_recipient = {
					is_councillor_of = scope:recipient
				}
			}
			add = -50
			desc = "carn_secondary_recipient_is_my_councillor_reason"
		}
		modifier = {
			trigger = {
				scope:secondary_recipient = {
					has_relation_friend = scope:recipient
				}
			}
			add = -50
			desc = "carn_secondary_recipient_is_my_friend_reason"
		}
		modifier = {
			trigger = {
				scope:secondary_recipient = {
					has_relation_lover = scope:recipient
				}
			}
			add = -50
			desc = "carn_secondary_recipient_is_my_lover_reason"
		}
		modifier = {
			trigger = {
				scope:secondary_recipient = {
					has_relation_crush = scope:recipient
				}
			}
			add = -50
			desc = "carn_secondary_recipient_is_my_crush_reason"
		}
		modifier = {
			trigger = {
				scope:secondary_recipient = {
					has_relation_soulmate = scope:recipient
				}
			}
			add = -1000
			desc = "carn_secondary_recipient_is_my_soulmate_reason"
		}
		modifier = { # Say no to rivals
			add = -55
			scope:recipient = {
				has_relation_rival = scope:actor
			}
			desc = "ACTOR_RIVAL_TO_ME_REASON"
		}
		modifier = { # Say no to rivals
			add = -300
			scope:recipient = {
				has_relation_nemesis = scope:actor
			}
			desc = "ACTOR_NEMESIS_TO_ME_REASON"
		}
		modifier = { # An Intimidated recipient is significantly more likely to accept an offer from the liege
			add = 40
			trigger = {
				scope:recipient = {
					target_is_liege_or_above = scope:actor
					has_dread_level_towards = {
						target = scope:actor
						level = 1
					}
				}
			}
			desc = INTIMIDATED_REASON
		}

		modifier = { # A Cowed recipient is significantly more likely to accept an offer from the liege
			add = 100
			trigger = {
				scope:recipient = {
					target_is_liege_or_above = scope:actor
					has_dread_level_towards = {
						target = scope:actor
						level = 2
					}
				}
			}
			desc = COWED_REASON
		}
	}
}